diff --git a/client/src/main/java/com/wirelust/bitbucket/client/BitbucketV2Client.java b/client/src/main/java/com/wirelust/bitbucket/client/BitbucketV2Client.java
index da14de9..eaf26fa 100644
--- a/client/src/main/java/com/wirelust/bitbucket/client/BitbucketV2Client.java
+++ b/client/src/main/java/com/wirelust/bitbucket/client/BitbucketV2Client.java
@@ -200,7 +200,7 @@ public Response getPullRequestDiff(
 	@GET
 	@Path("/2.0/snippets/{username}")
 	@Produces(MediaType.TEXT_PLAIN)
-	public Response getSnippitsByUsername(
+	public Response getSnippetsByUsername(
 		@PathParam("username") String username
 	);

@@ -208,13 +208,24 @@ public Response getSnippitsByUsername(
 	 * GET https://api.bitbucket.org/2.0/snippets
 	 */
 	@GET
-	@Path("/2.0/snippets/{username}")
+	@Path("/2.0/snippets")
 	@Produces(MediaType.TEXT_PLAIN)
-	public Response getSnippits(
+	public Response getSnippets(
 		@QueryParam("role") String role
 	);

 	/**
+	 * GET https://api.bitbucket.org/2.0/snippets/{username}/{id}
+	 */
+	@GET
+	@Path("/2.0/snippets/{username}/{id}")
+	@Produces(MediaType.TEXT_PLAIN)
+	public Response getSnippetByUsernameId(
+		@PathParam("username") String username,
+		@PathParam("id") String id
+	);
+
+	/**
 	 * GET https://api.bitbucket.org/2.0/snippets/{username or teamname}/{snippets 1}/comments
 	 */
 	@GET
diff --git a/client/src/main/java/com/wirelust/bitbucket/client/representations/File.java b/client/src/main/java/com/wirelust/bitbucket/client/representations/File.java
new file mode 100644
index 0000000..852fc5e
--- /dev/null
+++ b/client/src/main/java/com/wirelust/bitbucket/client/representations/File.java
@@ -0,0 +1,22 @@
+package com.wirelust.bitbucket.client.representations;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Date: 08-Nov-2015
+ *
+ * @author T. Curran
+ */
+public class File {
+
+	Map<String, List<Link>> links;
+
+	public Map<String, List<Link>> getLinks() {
+		return links;
+	}
+
+	public void setLinks(Map<String, List<Link>> links) {
+		this.links = links;
+	}
+}
diff --git a/client/src/main/java/com/wirelust/bitbucket/client/representations/Snippet.java b/client/src/main/java/com/wirelust/bitbucket/client/representations/Snippet.java
new file mode 100644
index 0000000..3140b01
--- /dev/null
+++ b/client/src/main/java/com/wirelust/bitbucket/client/representations/Snippet.java
@@ -0,0 +1,113 @@
+package com.wirelust.bitbucket.client.representations;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import com.wirelust.bitbucket.client.Constants;
+
+/**
+ * Date: 08-Nov-2015
+ *
+ * @author T. Curran
+ */
+public class Snippet {
+
+	String id;
+	Boolean isPrivate;
+	User creator;
+	User owner;
+	String scm;
+	String title;
+
+	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = Constants.DATE_TIME_FORMAT)
+	Date createdOn;
+
+	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = Constants.DATE_TIME_FORMAT)
+	Date updatedOn;
+
+	Map<String, File> files;
+
+	Map<String, List<Link>> links;
+
+	public String getId() {
+		return id;
+	}
+
+	public void setId(String id) {
+		this.id = id;
+	}
+
+	public Boolean getPrivate() {
+		return isPrivate;
+	}
+
+	public void setPrivate(Boolean aPrivate) {
+		isPrivate = aPrivate;
+	}
+
+	public User getCreator() {
+		return creator;
+	}
+
+	public void setCreator(User creator) {
+		this.creator = creator;
+	}
+
+	public User getOwner() {
+		return owner;
+	}
+
+	public void setOwner(User owner) {
+		this.owner = owner;
+	}
+
+	public String getScm() {
+		return scm;
+	}
+
+	public void setScm(String scm) {
+		this.scm = scm;
+	}
+
+	public String getTitle() {
+		return title;
+	}
+
+	public void setTitle(String title) {
+		this.title = title;
+	}
+
+	public Date getCreatedOn() {
+		return createdOn;
+	}
+
+	public void setCreatedOn(Date createdOn) {
+		this.createdOn = createdOn;
+	}
+
+	public Date getUpdatedOn() {
+		return updatedOn;
+	}
+
+	public void setUpdatedOn(Date updatedOn) {
+		this.updatedOn = updatedOn;
+	}
+
+	public Map<String, File> getFiles() {
+		return files;
+	}
+
+	public void setFiles(Map<String, File> files) {
+		this.files = files;
+	}
+
+	public Map<String, List<Link>> getLinks() {
+		return links;
+	}
+
+	public void setLinks(Map<String, List<Link>> links) {
+		this.links = links;
+	}
+}
diff --git a/client/src/test/java/test/com/wirelust/bitbucket/client/EndpointTest.java b/client/src/test/java/test/com/wirelust/bitbucket/client/EndpointTest.java
index de6e051..a09c014 100644
--- a/client/src/test/java/test/com/wirelust/bitbucket/client/EndpointTest.java
+++ b/client/src/test/java/test/com/wirelust/bitbucket/client/EndpointTest.java
@@ -452,6 +452,16 @@ public void shouldBeAbleToGetPullRequestDiff() throws Exception {
 	}

 	@Test
+	public void shouldBeAbleToDeseralizeSnippitByUsernameId() throws Exception {
+		Response response = bitbucketV2Client.getSnippetByUsernameId("username", "kypj");
+		Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus());
+
+		Snippet snippet = response.readEntity(Snippet.class);
+
+		Assert.assertEquals("kypj", snippet.getId());
+	}
+
+	@Test
 	public void shouldBeAbleToDeseralizeTeam() throws Exception {
 		Response response = bitbucketV2Client.getTeamByName("teamname");
 		Assert.assertEquals(HttpServletResponse.SC_OK, response.getStatus());
diff --git a/client/src/test/resources/api/2.0/snippits/username/kypj.json b/client/src/test/resources/api/2.0/snippits/username/kypj.json
new file mode 100644
index 0000000..d216c7c
--- /dev/null
+++ b/client/src/test/resources/api/2.0/snippits/username/kypj.json
@@ -0,0 +1,85 @@
+{
+	"created_on": "2015-03-18T19:56:51.269348+00:00",
+	"creator": {
+		"display_name": "Daniel  Stevens",
+		"links": {
+			"avatar": {
+				"href": "https://bitbucket-assetroot.s3.amazonaws.com/c/photos/2014/Jan/29/dans9190-avatar-2647033047-1_avatar.png"
+			},
+			"html": {
+				"href": "https://bitbucket.org/dans9190"
+			},
+			"self": {
+				"href": "https://api.bitbucket.org/2.0/users/dans9190"
+			}
+		},
+		"username": "dans9190",
+		"uuid": "{1cd06601-cd0e-4fce-be03-e9ac226978b7}"
+	},
+	"files": {
+		"README.md": {
+			"links": {
+				"html": {
+					"href": "https://bitbucket.org/snippets/teamsinspace/kypj/revisions/503019269b337032912f7fea99ed6f9bf1b91c24#README.md"
+				},
+				"self": {
+					"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/503019269b337032912f7fea99ed6f9bf1b91c24/files/README.md"
+				}
+			}
+		},
+		"myquote2.html": {
+			"links": {
+				"html": {
+					"href": "https://bitbucket.org/snippets/teamsinspace/kypj/revisions/503019269b337032912f7fea99ed6f9bf1b91c24#myquote2.html"
+				},
+				"self": {
+					"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/503019269b337032912f7fea99ed6f9bf1b91c24/files/myquote2.html"
+				}
+			}
+		}
+	},
+	"id": "kypj",
+	"is_private": false,
+	"links": {
+		"comments": {
+			"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/comments"
+		},
+		"commits": {
+			"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/commits"
+		},
+		"diff": {
+			"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/503019269b337032912f7fea99ed6f9bf1b91c24/diff"
+		},
+		"html": {
+			"href": "https://bitbucket.org/snippets/teamsinspace/kypj"
+		},
+		"patch": {
+			"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/503019269b337032912f7fea99ed6f9bf1b91c24/patch"
+		},
+		"self": {
+			"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj"
+		},
+		"watchers": {
+			"href": "https://api.bitbucket.org/2.0/snippets/teamsinspace/kypj/watchers"
+		}
+	},
+	"owner": {
+		"display_name": "Teams In Space",
+		"links": {
+			"avatar": {
+				"href": "https://bitbucket-assetroot.s3.amazonaws.com/c/photos/2014/Sep/24/teamsinspace-avatar-3731530358-7_avatar.png"
+			},
+			"html": {
+				"href": "https://bitbucket.org/teamsinspace"
+			},
+			"self": {
+				"href": "https://api.bitbucket.org/2.0/teams/teamsinspace"
+			}
+		},
+		"username": "teamsinspace",
+		"uuid": "{61fc5cf6-d054-47d2-b4a9-061ccf858379}"
+	},
+	"scm": "git",
+	"title": "API docs snippet",
+	"updated_on": "2015-03-18T19:56:51.269378+00:00"
+}